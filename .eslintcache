[{"/Users/iPrincess/Dev/Sandbox/firebase-chat-app/src/reportWebVitals.js":"1","/Users/iPrincess/Dev/Sandbox/firebase-chat-app/src/App.js":"2","/Users/iPrincess/Dev/Sandbox/firebase-chat-app/src/index.js":"3"},{"size":362,"mtime":1606364924436,"results":"4","hashOfConfig":"5"},{"size":3840,"mtime":1606424430612,"results":"6","hashOfConfig":"5"},{"size":493,"mtime":1606425693245,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1j746fr",{"filePath":"10","messages":"11","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"12"},{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/iPrincess/Dev/Sandbox/firebase-chat-app/src/reportWebVitals.js",[],"/Users/iPrincess/Dev/Sandbox/firebase-chat-app/src/App.js",["15","16","17"],"// React Imports\nimport React, { useEffect, useRef, useState } from 'react'\n\nimport firebase from 'firebase/app'\nimport 'firebase/firestore'\nimport 'firebase/auth'\n\nimport { useAuthState } from 'react-firebase-hooks/auth'\nimport { useCollectionData } from 'react-firebase-hooks/firestore'\n\n// CSS Styling\nimport './App.css'\n\nfirebase.initializeApp({\n  apiKey: 'AIzaSyBO8nO42_nu9lE4QoztGstkLZ_O_nFP9U8',\n  authDomain: 'fir-chat-app-ad4f8.firebaseapp.com',\n  databaseURL: 'https://fir-chat-app-ad4f8.firebaseio.com',\n  projectId: 'fir-chat-app-ad4f8',\n  storageBucket: 'fir-chat-app-ad4f8.appspot.com',\n  messagingSenderId: '17760635186',\n  appId: '1:17760635186:web:a3c3e81c4d2c754bff2f2b',\n  measurementId: 'G-JQSZM3NJ6K'\n})\nconst auth = firebase.auth()\nconst firestore = firebase.firestore()\n\nfunction App() {\n  // Confirm user is logged in and successfully authenticated\n  const [user] = useAuthState(auth)\n\n  return (\n    <div className='App'>\n      <SignOut />\n      <section>\n        {/* If user is logged in the chat room is displayed elase the sign in page is displayed */}\n        {user ? <ChatRoom /> : <SignIn />}\n      </section>\n    </div>\n  )\n}\n\n// TODO: Refactor to separate component\nfunction SignIn() {\n  const signInWithGoogle = () => {\n    const provider = new firebase.auth.GoogleAuthProvider()\n    auth.signInWithPopup(provider)\n  }\n  return (\n    <div className='sign-in-pop-up'>\n      <button onClick={signInWithGoogle}>\n        Sign In With Your Google Account\n      </button>\n    </div>\n  )\n}\n\n// TODO: Refactor to separate component\nfunction SignOut() {\n  return (\n    auth.currentUser && (\n      <div className='sign-out'>\n        <button onClick={() => auth.signOut()}>Sign Out</button>\n      </div>\n    )\n  )\n}\n// TODO: Refactor to separate component\n\nfunction ChatRoom() {\n  // used to scroll to the bottom of the chat on page reload after new messages are sent\n  const dummy = useRef()\n  const messagesRef = firestore.collection('messages')\n  const query = messagesRef.orderBy('createdAt', 'asc').limitToLast(25)\n\n  // getting the message and sorting them by time of creation\n  const [messages] = useCollectionData(query, { idField: 'id' })\n  const [formValue, setFormValue] = useState('')\n\n  const scrollToBottom = () => {\n    dummy.current.scrollIntoView({ behavior: 'smooth' })\n  }\n\n  useEffect(scrollToBottom, [messages])\n  // TODO: Refactor to separate component\n  const sendMessage = async e => {\n    e.preventDefault()\n    // request name, userID, uid, and pfp of logged in user\n    const { displayName, uid, photoURL } = auth.currentUser\n\n    await messagesRef.add({\n      user: displayName,\n      body: formValue,\n      createdAt: firebase.firestore.FieldValue.serverTimestamp(),\n      uid: uid,\n      photoURL: photoURL\n    })\n\n    // Clear the form input value and scroll to bottom\n    setFormValue('')\n    dummy.current.scrollIntoView({ behavior: 'smooth' })\n  }\n\n  function ChatMessage(props) {\n    const { user, body, uid, photoURL, createdAt } = props.message\n\n    return (\n      <div>\n        <img\n          src={photoURL || 'https://i.imgur.com/rFbS5ms.png'}\n          alt=\"{user}'s picture\"\n        />\n        <div>\n          <p>{user}</p>\n          <p>{body}</p>\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <div className=''>\n      <div className=''>\n        {/*  */}\n        {messages &&\n          messages.map(msg => <ChatMessage key={msg.id} message={msg} />)}\n        <span ref={dummy}></span>\n      </div>\n      {/* Form input to type and submit messages */}\n      <form onSubmit={sendMessage}>\n        <input\n          value={formValue}\n          onChange={e => setFormValue(e.target.value)}\n          placeholder='Say hello!'\n        />\n        <button type='submit' disabled={!formValue}>\n          send\n        </button>\n      </form>\n    </div>\n  )\n}\n\nexport default App\n","/Users/iPrincess/Dev/Sandbox/firebase-chat-app/src/index.js",[],{"ruleId":"18","severity":1,"message":"19","line":104,"column":25,"nodeType":"20","messageId":"21","endLine":104,"endColumn":28},{"ruleId":"18","severity":1,"message":"22","line":104,"column":40,"nodeType":"20","messageId":"21","endLine":104,"endColumn":49},{"ruleId":"23","severity":1,"message":"24","line":108,"column":9,"nodeType":"25","endLine":111,"endColumn":11},"no-unused-vars","'uid' is assigned a value but never used.","Identifier","unusedVar","'createdAt' is assigned a value but never used.","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You donâ€™t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement"]